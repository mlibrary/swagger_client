=begin
#COUNTER_SUSHI5_0 API

#The COUNTER_SUSHI5_0 API represents a RESTful implementation of SUSHI automation intended to return COUNTER Release 5 reports and snippets of COUNTER usage in JSON format

OpenAPI spec version: 1.0.0
Contact: nisohq@niso.org
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 1.0.16

=end

require 'date'

module SwaggerClient
  # Generalized report header that defines the requested report, the requestor, the customer, filters applied, reportAttributes applied and any exceptions.
  class SUSHIReportHeader
    # Time the report was prepared. Format as defined by date-time - RFC3339
    attr_accessor :created

    # Name of the organization producing the report.
    attr_accessor :created_by

    # Identifer of the customer the report represents - identifier used on the request
    attr_accessor :customer_id

    # The report ID or code or shortname. Typically this will be the same code provided in the Report parameter of the request.
    attr_accessor :report_id

    # The release or version of the report.
    attr_accessor :release

    # The long name of the report.
    attr_accessor :report_name

    # Name of the customer.
    attr_accessor :institution_name

    # Other identifiers for the organization, including ISNI, etc. if available
    attr_accessor :institution_id

    # A List of report filters used for this report.  Typically  reflect filters provided on the Request.  Filters limit the data to be reported on.
    attr_accessor :report_filters

    # Any additional attributes applied to the report. Attributes inform the level of detail in the report.
    attr_accessor :report_attributes

    # Series of exceptions encounted when preparing the report.
    attr_accessor :exceptions


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'Created',
        :'created_by' => :'Created_By',
        :'customer_id' => :'Customer_ID',
        :'report_id' => :'Report_ID',
        :'release' => :'Release',
        :'report_name' => :'Report_Name',
        :'institution_name' => :'Institution_Name',
        :'institution_id' => :'Institution_ID',
        :'report_filters' => :'Report_Filters',
        :'report_attributes' => :'Report_Attributes',
        :'exceptions' => :'Exceptions'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created' => :'String',
        :'created_by' => :'String',
        :'customer_id' => :'String',
        :'report_id' => :'String',
        :'release' => :'String',
        :'report_name' => :'String',
        :'institution_name' => :'String',
        :'institution_id' => :'Array<SUSHIOrgIdentifiers>',
        :'report_filters' => :'Array<SUSHIReportHeaderReportFilters>',
        :'report_attributes' => :'Array<SUSHIReportHeaderReportAttributes>',
        :'exceptions' => :'Array<SUSHIErrorModel>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Created')
        self.created = attributes[:'Created']
      end

      if attributes.has_key?(:'Created_By')
        self.created_by = attributes[:'Created_By']
      end

      if attributes.has_key?(:'Customer_ID')
        self.customer_id = attributes[:'Customer_ID']
      end

      if attributes.has_key?(:'Report_ID')
        self.report_id = attributes[:'Report_ID']
      end

      if attributes.has_key?(:'Release')
        self.release = attributes[:'Release']
      end

      if attributes.has_key?(:'Report_Name')
        self.report_name = attributes[:'Report_Name']
      end

      if attributes.has_key?(:'Institution_Name')
        self.institution_name = attributes[:'Institution_Name']
      end

      if attributes.has_key?(:'Institution_ID')
        if (value = attributes[:'Institution_ID']).is_a?(Array)
          self.institution_id = value
        end
      end

      if attributes.has_key?(:'Report_Filters')
        if (value = attributes[:'Report_Filters']).is_a?(Array)
          self.report_filters = value
        end
      end

      if attributes.has_key?(:'Report_Attributes')
        if (value = attributes[:'Report_Attributes']).is_a?(Array)
          self.report_attributes = value
        end
      end

      if attributes.has_key?(:'Exceptions')
        if (value = attributes[:'Exceptions']).is_a?(Array)
          self.exceptions = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @report_id.nil?
        invalid_properties.push("invalid value for 'report_id', report_id cannot be nil.")
      end

      if @release.nil?
        invalid_properties.push("invalid value for 'release', release cannot be nil.")
      end

      if @report_name.nil?
        invalid_properties.push("invalid value for 'report_name', report_name cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @report_id.nil?
      return false if @release.nil?
      return false if @report_name.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          created_by == o.created_by &&
          customer_id == o.customer_id &&
          report_id == o.report_id &&
          release == o.release &&
          report_name == o.report_name &&
          institution_name == o.institution_name &&
          institution_id == o.institution_id &&
          report_filters == o.report_filters &&
          report_attributes == o.report_attributes &&
          exceptions == o.exceptions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created, created_by, customer_id, report_id, release, report_name, institution_name, institution_id, report_filters, report_attributes, exceptions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
