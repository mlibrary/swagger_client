=begin
#COUNTER_SUSHI5_0 API

#The COUNTER_SUSHI5_0 API represents a RESTful implementation of SUSHI automation intended to return COUNTER Release 5 reports and snippets of COUNTER usage in JSON format

OpenAPI spec version: 1.0.0
Contact: nisohq@niso.org
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 1.0.16

=end

require 'date'

module SwaggerClient
  # Defines the output for the Report_Items being returned in a Platform Report.
  class COUNTERPlatformUsage
    # Name of the platform
    attr_accessor :platform

    # Nature of the item being reported.
    attr_accessor :data_type

    # Year of publication in the format of 'yyyy'.  If the item is available in both online and print format, use the year of publication for the print. Use '0001' for unknown and '9999' for articles in press.
    attr_accessor :yop

    # Nature of the access control in place for item retrieved.
    attr_accessor :access_type

    # Identifies if the usage activity was 'Regular' usage (a user doing research on a content site) or if the usage was for the purpose of retrieving content for Text and Data Mining (TDM)
    attr_accessor :access_method

    # The usage data related to the report item
    attr_accessor :performance

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'platform' => :'Platform',
        :'data_type' => :'Data_Type',
        :'yop' => :'YOP',
        :'access_type' => :'Access_Type',
        :'access_method' => :'Access_Method',
        :'performance' => :'Performance'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'platform' => :'String',
        :'data_type' => :'String',
        :'yop' => :'String',
        :'access_type' => :'String',
        :'access_method' => :'String',
        :'performance' => :'Array<COUNTERItemPerformance>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Platform')
        self.platform = attributes[:'Platform']
      end

      if attributes.has_key?(:'Data_Type')
        self.data_type = attributes[:'Data_Type']
      end

      if attributes.has_key?(:'YOP')
        self.yop = attributes[:'YOP']
      end

      if attributes.has_key?(:'Access_Type')
        self.access_type = attributes[:'Access_Type']
      end

      if attributes.has_key?(:'Access_Method')
        self.access_method = attributes[:'Access_Method']
      end

      if attributes.has_key?(:'Performance')
        if (value = attributes[:'Performance']).is_a?(Array)
          self.performance = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @platform.nil?
        invalid_properties.push("invalid value for 'platform', platform cannot be nil.")
      end

      if @performance.nil?
        invalid_properties.push("invalid value for 'performance', performance cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @platform.nil?
      data_type_validator = EnumAttributeValidator.new('String', ["Article", "Book", "Book Segment", "Collection", "Database", "Dataset", "Journal", "Multimedia", "Platform", "Repository Item"])
      return false unless data_type_validator.valid?(@data_type)
      access_type_validator = EnumAttributeValidator.new('String', ["Controlled", "OA_Gold", "Other_Free_To_Read"])
      return false unless access_type_validator.valid?(@access_type)
      access_method_validator = EnumAttributeValidator.new('String', ["Regular", "TDM"])
      return false unless access_method_validator.valid?(@access_method)
      return false if @performance.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] data_type Object to be assigned
    def data_type=(data_type)
      validator = EnumAttributeValidator.new('String', ["Article", "Book", "Book Segment", "Collection", "Database", "Dataset", "Journal", "Multimedia", "Platform", "Repository Item"])
      unless validator.valid?(data_type)
        fail ArgumentError, "invalid value for 'data_type', must be one of #{validator.allowable_values}."
      end
      @data_type = data_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_type Object to be assigned
    def access_type=(access_type)
      validator = EnumAttributeValidator.new('String', ["Controlled", "OA_Gold", "Other_Free_To_Read"])
      unless validator.valid?(access_type)
        fail ArgumentError, "invalid value for 'access_type', must be one of #{validator.allowable_values}."
      end
      @access_type = access_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] access_method Object to be assigned
    def access_method=(access_method)
      validator = EnumAttributeValidator.new('String', ["Regular", "TDM"])
      unless validator.valid?(access_method)
        fail ArgumentError, "invalid value for 'access_method', must be one of #{validator.allowable_values}."
      end
      @access_method = access_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          platform == o.platform &&
          data_type == o.data_type &&
          yop == o.yop &&
          access_type == o.access_type &&
          access_method == o.access_method &&
          performance == o.performance
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [platform, data_type, yop, access_type, access_method, performance].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
